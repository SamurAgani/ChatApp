@page "/chatlist"
@using Shared.Models
@using ChatApp.Client.Services.Abstract
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly

<MudContainer Class="chat-list-container pa-4">
    @if (Chats.Any())
    {
        @foreach (var chat in Chats)
        {
            <MudPaper Class="mb-2 chat-item" @onclick="() => SelectChat(chat)" Elevation="2">
                <MudItemText>
                    <MudText Style="font-weight: bold;">@GetChatDisplayName(chat)</MudText>
                </MudItemText>
                @if (chat.UnreadMessages > 0)
                {
                    <MudBadge Content="@chat.UnreadMessages" Color="Color.Secondary" Class="chat-badge" />
                }
            </MudPaper>
        }
    }
    else
    {
        <MudText>No active chats available</MudText>
    }
    <MudContainer Class="pagination-controls">
        <MudButton Disabled="@IsFirstPage" OnClick="@(() => LoadChats(CurrentPage - 1))">Previous</MudButton>
        <MudText>Page @CurrentPage</MudText>
        <MudButton Disabled="@IsLastPage" OnClick="@(() => LoadChats(CurrentPage + 1))">Next</MudButton>
    </MudContainer>
    <MudPaper Class="chat-item chat-add-item pa-3 mt-3" Elevation="1">
        <MudGrid>
            <MudItem xs="9">
                <MudTextField T="string" @bind-Value="newUserName" Placeholder="Add user name" Variant="Variant.Outlined" FullWidth="true" Class="chat-add-textfield" />
            </MudItem>
            <MudItem xs="3">
                <MudButton Color="Color.Primary" Variant="Variant.Text" @onclick="AddNewChatAsync" FullWidth="true" Class="chat-add-button">+</MudButton>
            </MudItem>
        </MudGrid>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Color="Color.Error" Class="mt-2">@ErrorMessage</MudText>
        }
    </MudPaper>
</MudContainer>



@code {

    private int CurrentPage = 1;
    private int PageSize = 5;
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => Chats.Count < PageSize;
    [Inject]
    private IChatService ChatService { get; set; }
    [Parameter]
    public EventCallback<string> SelectUser { get; set; }

    [Parameter]
    public IList<Chat> Chats { get; set; } = new List<Chat>();

    [Parameter]
    public string UserName { get; set; }

    private Chat _selectedChat;
    public string ErrorMessage { get; set; }
    public string newUserName { get; set; }
    private async Task LoadChats(int page)
    {
        var response = await ChatService.GetChatsByUserNameAsync(UserName, page, PageSize);
        if (response != null)
        {
            Chats = response.Value;
            CurrentPage = page;
        }
    }
    private void SelectChat(Chat chat)
    {
        _selectedChat = chat;
        chat.UnreadMessages = 0;
        string selectedUserName = GetChatDisplayName(chat);
        SelectUser.InvokeAsync(selectedUserName);
    }

    private string GetChatDisplayName(Chat chat)
    {
        return chat.Sender.UserName != UserName ? chat.Sender.UserName : chat.Receiver.UserName;
    }

    private async Task AddNewChatAsync()
    {
        ErrorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newUserName) || newUserName == UserName)
        {
            ErrorMessage = "User name is required.";
            return;
        }

        var result = await ChatService.UserExistsAsync(newUserName);

        if (!result.IsSuccess)
        {
            ErrorMessage = result.Errors.First().Message;
        }
        await SelectUser.InvokeAsync(newUserName);
        newUserName = string.Empty;
        LoadChats(1);
    }
}
