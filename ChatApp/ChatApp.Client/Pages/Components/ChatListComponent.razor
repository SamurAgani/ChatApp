@page "/chatlist"
@using Shared.Models
@inject NavigationManager Navigation

<MudContainer Class="chat-list-container pa-4" Style="background-color: #f5f5f5; border-radius: 8px; max-height: 600px; overflow-y: auto;">
    @if (Chats.Any())
    {
        @foreach (var chat in Chats)
        {
            <MudPaper Class="mb-2 chat-item" @onclick="() => SelectChat(chat)" Elevation="2" Style="padding: 10px; cursor: pointer; transition: background-color 0.3s; background-color: #ffffff; border-radius: 8px;">
                <MudItemText>
                    <MudText Style="font-weight: bold;">@GetChatDisplayName(chat)</MudText>
                </MudItemText>
                @if (chat.UnreadMessages > 0)
                {
                    <MudBadge Content="@chat.UnreadMessages" Color="Color.Secondary" Style="margin-left: 8px;"/>
                }
            </MudPaper>
        }
    }
    else
    {
        <MudText>No active chats available</MudText>
    }

    <MudPaper Class="chat-item pa-3 mt-3" Elevation="1" Style="border-radius: 8px; background-color: #ffffff;">
        <MudGrid>
            <MudItem xs="9">
                <MudTextField T="string" @bind-Value="newUserName" Placeholder="Add user name" Variant="Variant.Outlined" FullWidth="true" Style="border-radius: 8px;" />
            </MudItem>
            <MudItem xs="3">
                <MudButton Color="Color.Primary" Variant="Variant.Text" @onclick="AddNewChatAsync" FullWidth="true" Style="font-size: 1.5rem;">+</MudButton>
            </MudItem>
        </MudGrid>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Color="Color.Error" Class="mt-2">@ErrorMessage</MudText>
        }
    </MudPaper>
</MudContainer>


@code {
    [Parameter]
    public EventCallback<string> SelectUser { get; set; }

    [Parameter]
    public List<Chat> Chats { get; set; } = new List<Chat>();

    [Parameter]
    public string UserName { get; set; }

    private Chat _selectedChat;
    public string ErrorMessage { get; set; }
    public string newUserName { get; set; }

    private void SelectChat(Chat chat)
    {
        _selectedChat = chat;
        chat.UnreadMessages = 0;
        string selectedUserName = GetChatDisplayName(chat);
        SelectUser.InvokeAsync(selectedUserName);
    }

    private string GetChatDisplayName(Chat chat)
    {
        return chat.Sender.UserName != UserName ? chat.Sender.UserName : chat.Receiver.UserName;
    }

    private async Task AddNewChatAsync()
    {
        ErrorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newUserName) || newUserName == UserName)
        {
            ErrorMessage = "User name is required.";
            return;
        }

        try
        {
            var httpClient = new HttpClient();
            var userExistsResponse = await httpClient.GetFromJsonAsync<bool>($"https://localhost:7121/api/user/UserExists?username={newUserName}");

            if (!userExistsResponse)
            {
                ErrorMessage = $"User '{newUserName}' does not exist.";
                return;
            }

            await SelectUser.InvokeAsync(newUserName);
            newUserName = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error checking user: {ex.Message}";
        }
    }
}
