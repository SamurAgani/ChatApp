@page "/chatlist"
@using Shared.Models
@inject NavigationManager Navigation


<MudContainer Class="chat-list-container">
@if (Chats.Any())
{
    @foreach (var chat in Chats)
    {
        <MudPaper Class="mb-2" @onclick="() => SelectChat(chat)" Elevation="1">
            <MudItemText>
                @GetChatDisplayName(chat)
            </MudItemText>
            @if (chat.UnreadMessages > 0)
            {
                <MudBadge Content="@chat.UnreadMessages" Color="Color.Secondary" />
            }
        </MudPaper>
    }
}

    <MudPaper Class="chat-item pa-2 mt-2" Elevation="1">
        <MudTextField T="string" @bind-Value="newUserName" Placeholder="Add user name" Variant="MudBlazor.Variant.Outlined" FullWidth="true" />
        <MudButton Color="Color.Primary" Variant="MudBlazor.Variant.Text" @onclick="AddNewChatAsync">+</MudButton>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Color="Color.Error">@ErrorMessage</MudText>
        }
    </MudPaper>

</MudContainer>

@code {
    [Parameter]
    public EventCallback<string> SelectUser { get; set; }

    [Parameter]
    public List<Chat> Chats { get; set; } = new List<Chat>();

    [Parameter]
    public string UserName { get; set; }

    private Chat _selectedChat;
    public string ErrorMessage { get; set; }
    public string newUserName { get; set; }

    private void SelectChat(Chat chat)
    {
        _selectedChat = chat;
        chat.UnreadMessages = 0;
        string selectedUserName = GetChatDisplayName(chat);
        SelectUser.InvokeAsync(selectedUserName);
    }

    private string GetChatDisplayName(Chat chat)
    {
        return chat.Sender.UserName != UserName ? chat.Sender.UserName : chat.Receiver.UserName;
    }

    private async Task AddNewChatAsync()
    {
        ErrorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newUserName) || newUserName == UserName)
        {
            ErrorMessage = "User name is required.";
            return;
        }

        try
        {
            var httpClient = new HttpClient();
            var userExistsResponse = await httpClient.GetFromJsonAsync<bool>($"https://localhost:7121/api/user/UserExists?username={newUserName}");

            if (!userExistsResponse)
            {
                ErrorMessage = $"User '{newUserName}' does not exist.";
                return;
            }

            await SelectUser.InvokeAsync(newUserName);
            newUserName = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error checking user: {ex.Message}";
        }
    }
}
