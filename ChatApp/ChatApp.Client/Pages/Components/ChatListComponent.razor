@page "/chatlist"
@using Shared.Models
@inject NavigationManager Navigation

<div class="chat-list-container">
    @if (Chats.Any())
    {
        @foreach (var chat in Chats)
        {
            <div class="chat-item @(chat == _selectedChat ? "selected" : "")" @onclick="() => SelectChat(chat)">
                <span>@GetChatDisplayName(chat)</span>
                @if (chat.UnreadMessages > 0)
                {
                    <span class="unread-badge">@chat.UnreadMessages</span>
                }
            </div>
        }
    }
    <div class="chat-item add-chat">
        <input type="text" class="add-user-input" @bind="newUserName" placeholder="Add user name" />
        <button class="add-user-button" @onclick="AddNewChatAsync">+</button>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <span class="error-message">@ErrorMessage</span>
        }
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<string> SelectUser { get; set; }

    [Parameter]
    public List<Chat> Chats { get; set; } = new List<Chat>();

    [Parameter]
    public string UserName { get; set; }

    private Chat _selectedChat;
    public string ErrorMessage { get; set; }
    public string newUserName { get; set; }

    private void SelectChat(Chat chat)
    {
        _selectedChat = chat;
        chat.UnreadMessages = 0;
        string selectedUserName = GetChatDisplayName(chat);
        SelectUser.InvokeAsync(selectedUserName);
    }

    private string GetChatDisplayName(Chat chat)
    {
        return chat.Sender.UserName != UserName ? chat.Sender.UserName : chat.Receiver.UserName;
    }

    private async Task AddNewChatAsync()
    {
        ErrorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newUserName) || newUserName == UserName)
        {
            ErrorMessage = "User name is required.";
            return;
        }

        try
        {
            var httpClient = new HttpClient();
            var userExistsResponse = await httpClient.GetFromJsonAsync<bool>($"https://localhost:7121/api/user/UserExists?username={newUserName}");

            if (!userExistsResponse)
            {
                ErrorMessage = $"User '{newUserName}' does not exist.";
                return;
            }
            
            await SelectUser.InvokeAsync(newUserName);
            newUserName = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error checking user: {ex.Message}";
        }
    }
}
