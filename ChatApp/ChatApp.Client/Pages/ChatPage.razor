@page "/chat/{userName}"
@using ChatApp.Client.Pages.Components
@using ChatApp.Client.Services.Abstract
@using Microsoft.AspNetCore.SignalR.Client
@using Shared.Models
@using MudBlazor
@inject NavigationManager Navigation
@inject MudBlazor.ISnackbar Snackbar
@rendermode InteractiveWebAssembly

<PageTitle>Chat</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" class="mud-container">
    <MudGrid>
        <MudItem xs="4">
            <MudPaper class="chat-list-container pa-3">
                <ChatListComponent SelectUser="@ChangeChat" Chats="@chats" UserName="@userName"></ChatListComponent>
            </MudPaper>
        </MudItem>

        <MudItem xs="8">
            <MudPaper class="chat-window pa-3">
                @if (currentChat != null && currentChat.Messages.Any())
                {
                    @foreach (var message in currentChat.Messages)
                    {
                        <MudPaper class="chat-message" Elevation="1">
                            <MudText Typography="Body2" class="message-time">@message.TimeSent.ToString("HH:mm")</MudText>
                            <MudText Typography="Body1" class="message-sender"><b>@message.SenderName</b></MudText>
                            <MudText Typography="Body1" class="message-body">@message.Body</MudText>
                        </MudPaper>
                    }
                }
                else
                {
                    <MudText class="no-messages">No messages yet</MudText>
                }
            </MudPaper>

            <MudPaper class="message-input-container pa-3">
                <MudGrid>
                    <MudItem xs="10">
                        <MudTextField T="string" @bind-Value="newMessage.Body" Placeholder="Type your message..." Immediate="true" OnKeyDown="HandleKeyPress" FullWidth="true" class="message-text-field">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="2">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="SendMessageAsync" FullWidth="true" class="send-button">Send</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Inject]
    private IChatService ChatService { get; set; }
    private Message newMessage = new();
    private User currentUser = new();
    private Chat currentChat = new();
    private List<Chat> chats = new();
    private HubConnection hubConnection;
    [Parameter]
    public string userName { get; set; }
    private string receiverName;


    protected override async Task OnInitializedAsync()
    {
        await InitializeHubConnectionAsync();
        await LoadUserDataAsync();
        await ChatService.RegisterUserAsync(hubConnection, userName);
    }

    private async Task InitializeHubConnectionAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Message>("ReceiveMessage", async (message) => await HandleReceivedMessageAsync(message));

        await hubConnection.StartAsync();
    }

    private async Task LoadUserDataAsync()
    {
        var userResult = await ChatService.GetUserAsync(userName);
        if (userResult.IsSuccess)
        {
            currentUser = userResult.Value;
            var chatResult = await ChatService.GetUserChatsAsync(userName);
            if (chatResult.IsSuccess)
            {
                chats = chatResult.Value;
            }
            else
            {
                Snackbar.Add(chatResult.Errors.First().Message, Severity.Error);
            }
        }
        else
        {
            Snackbar.Add(userResult.Errors.First().Message, Severity.Error);

        }
    }

    private async Task HandleReceivedMessageAsync(Message message)
    {
        var targetChat = chats.FirstOrDefault(x => x.Id == message.ChatId);

        if (targetChat == null)
        {
            targetChat = new Chat { Id = message.ChatId, Sender = new User { UserName = message.SenderName }, UnreadMessages = 1 };
            chats.Add(targetChat);
        }
        else if (currentChat == null || message.ChatId != currentChat.Id)
        {
            targetChat.UnreadMessages++;
        }
        else
        {
            currentChat.Messages.Add(message);
        }

        await ChatService.UpdateChatAsync(targetChat);
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessageAsync();
        }
    }

    private async Task SendMessageAsync()
    {
        if (currentChat == null || string.IsNullOrWhiteSpace(newMessage.Body))
        {
            return;
        }
        if (string.IsNullOrWhiteSpace(receiverName))
        {
            Snackbar.Add("Select Chat!", Severity.Error);
            return;
        }
        newMessage.ChatId = currentChat.Id;
        newMessage.TimeSent = DateTime.Now;
        newMessage.SenderName = currentUser.UserName;
        currentChat.Messages.Add(newMessage);

        await hubConnection.InvokeAsync("SendMessage", newMessage, receiverName);
        newMessage = new Message();
    }

    private async Task ChangeChat(string newReceiverName)
    {
        receiverName = newReceiverName;
        var chatResult = await ChatService.GetOrCreateChatAsync(userName, receiverName);

        if (chatResult.IsSuccess)
        {
            currentChat = chatResult.Value;

            if (!chats.Any(x => x.Id == currentChat.Id))
            {
                chats.Add(currentChat);
            }

            StateHasChanged();
        }
        else
        {
            Snackbar.Add(chatResult.Errors.First().Message, Severity.Error);
        }
    }
}
