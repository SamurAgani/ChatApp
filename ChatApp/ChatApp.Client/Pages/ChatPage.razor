@page "/chat/{userName}"
@using ChatApp.Client.Pages.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Shared.Models
@using MudBlazor
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject MudBlazor.ISnackbar Snackbar

<PageTitle>Chat</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" class="mud-container">
    <MudGrid>
        <MudItem xs="4">
            <MudPaper class="chat-list-container pa-3">
                <ChatListComponent SelectUser="@ChangeChat" Chats="@chats" UserName="@userName"></ChatListComponent>
            </MudPaper>
        </MudItem>

        <MudItem xs="8">
            <MudPaper class="chat-window pa-3">
                @if (currentChat != null && currentChat.Messages.Any())
                {
                    @foreach (var message in currentChat.Messages)
                    {
                        <MudPaper class="chat-message" Elevation="1">
                            <MudText Typography="Body2" class="message-time">@message.TimeSent.ToString("HH:mm")</MudText>
                            <MudText Typography="Body1" class="message-sender"><b>@message.SenderName</b></MudText>
                            <MudText Typography="Body1" class="message-body">@message.Body</MudText>
                        </MudPaper>
                    }
                }
                else
                {
                    <MudText class="no-messages">No messages yet</MudText>
                }
            </MudPaper>

            <MudPaper class="message-input-container pa-3">
                <MudGrid>
                    <MudItem xs="10">
                        <MudTextField T="string" @bind-Value="newMessage.Body" Placeholder="Type your message..." Immediate="true" OnKeyDown="HandleKeyPress" FullWidth="true" class="message-text-field">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="2">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="SendMessageAsync" FullWidth="true" class="send-button">Send</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private Message newMessage = new();
    private User currentUser = new();
    private Chat currentChat = new();
    private List<Chat> chats = new();
    private HubConnection hubConnection;
    private HttpClient httpClient;
    [Parameter]
    public string userName { get; set; }
    private string receiverName;

    protected override async Task OnInitializedAsync()
    {
        httpClient = new HttpClient { BaseAddress = new Uri("https://localhost:7121") };

        await InitializeHubConnectionAsync();
        await LoadUserDataAsync();
        await RegisterUserAsync();
    }

    private async Task InitializeHubConnectionAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Message>("ReceiveMessage", async (message) => await HandleReceivedMessageAsync(message));

        await hubConnection.StartAsync();
    }

    private async Task LoadUserDataAsync()
    {
        currentUser = await httpClient.GetFromJsonAsync<User>($"api/user?username={userName}");
        if (currentUser?.Chats != null)
        {
            chats = await httpClient.GetFromJsonAsync<List<Chat>>($"api/user/GetUserChats?username={userName}");
            currentChat = currentUser.Chats.FirstOrDefault();
        }
        currentUser.UserName = userName;
    }

    private async Task RegisterUserAsync()
    {
        await hubConnection.InvokeAsync("Register", userName);
        StateHasChanged();
    }

    private async Task HandleReceivedMessageAsync(Message message)
    {
        var targetChat = chats.FirstOrDefault(x => x.Id == message.ChatId);

        if (targetChat == null)
        {
            targetChat = new Chat { Id = message.ChatId, Sender = new User { UserName = message.SenderName }, UnreadMessages = 1 };
            chats.Add(targetChat);
        }
        else if (currentChat == null || message.ChatId != currentChat.Id)
        {
            targetChat.UnreadMessages++;
        }
        else
        {
            currentChat.Messages.Add(message);
        }

        await UpdateChatAsync(targetChat);
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateChatAsync(Chat chat)
    {
        if (chat != null)
        {
            await httpClient.PostAsJsonAsync($"/api/user/UpdateChat", chat);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessageAsync();
        }
    }

    private async Task SendMessageAsync()
    {
        if (currentChat == null || string.IsNullOrWhiteSpace(newMessage.Body))
        {
            return;
        }

        newMessage.ChatId = currentChat.Id;
        newMessage.TimeSent = DateTime.Now;
        newMessage.SenderName = currentUser.UserName;
        currentChat.Messages.Add(newMessage);

        await hubConnection.InvokeAsync("SendMessage", newMessage, receiverName);
        newMessage = new Message();
    }

    private async Task ChangeChat(string newReceiverName)
    {
        receiverName = newReceiverName;
        currentChat = await GetOrCreateChatAsync(userName, receiverName);

        if (!chats.Any(x => x.Id == currentChat.Id))
        {
            chats.Add(currentChat);
        }

        StateHasChanged();
    }

    private async Task<Chat> GetOrCreateChatAsync(string senderName, string receiverName)
    {
        return await httpClient.GetFromJsonAsync<Chat>($"/api/user/GetOrCreateChat?senderName={senderName}&receiverName={receiverName}");
    }
}
